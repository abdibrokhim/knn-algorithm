# -*- coding: utf-8 -*-
"""Diabetes.v2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Vf0QclSvdrP9ZN-SCq0bcJ2ogAetMa39
"""

import pandas as pd

rawDataset = pd.read_csv("https://raw.githubusercontent.com/abdibrokhim/datasets/master/diabetes.csv")

rawDataset

rawDataset.shape

rawDataset.info()

rawDataset.isnull().sum()

"""The final result is:

X_train and y_train - for training, data and target, respectively

X_test - data for predicting with the algorithm

y_test - target for validation the model
"""

import numpy as np

# non_zero = ['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age']
# for col in non_zero:
#   rawDataset[col] = rawDataset[col].replace(0, np.NaN)
#   mean = int(rawDataset[col].median(skipna=True))
#   rawDataset[col] = rawDataset[col].replace(np.NaN, mean)



rawDataset

train = rawDataset.sample(frac=0.7, random_state=500)

test = rawDataset.drop(train.index)

X_train = train.drop(labels=['Pregnancies', 'Outcome'], axis=1)

y_train = train.Outcome

X_test = test.drop(labels=['Pregnancies', 'Outcome'], axis=1)

y_test = test.Outcome

print(X_train.head(),"\n", y_train.head())

X_train.shape,X_test.shape

y_train.shape,y_test.shape

from sklearn.neighbors import KNeighborsClassifier

knn = KNeighborsClassifier(n_neighbors=3)

knn.fit(X_train,y_train)

knn.score(X_test,y_test)

results = knn.predict(X_test)

results

print(pd.crosstab(y_test, results, rownames=['Real'], colnames=['Predicted'], margins=True, margins_name='Total'))

from sklearn import metrics

"""Optimizing the Parameter K (n_neighbors)"""

k_list = list(range(1,31))

k_values = dict(n_neighbors=k_list)
print(k_values.keys()),
print(k_values.values())

from sklearn.model_selection import GridSearchCV

grid = GridSearchCV(knn, k_values, cv=5, scoring='accuracy')

grid.fit(rawDataset.drop(labels=['Pregnancies', 'Outcome'], axis=1), rawDataset.Outcome)

grid.cv_results_
grid_table = pd.DataFrame(grid.cv_results_)
grid_table.head()

for key in grid.cv_results_.keys():
  print(key)

grid_table_rank = grid_table[['params','mean_test_score','std_test_score','rank_test_score']].loc[grid_table['rank_test_score']==1].sort_values(by='std_test_score', ascending=True)
grid_table_rank

print("The best value of k = {} with {} of accuracy.".format(grid.best_params_,grid.best_score_))

print("The best k value, rank {}, with k = {}, highest mean accuracy along with the cross validation = {} and lowest standard deviation = {}".format(grid_table.at[grid.best_index_,'rank_test_score'],grid_table.at[grid.best_index_,'params'],grid_table.at[grid.best_index_,'mean_test_score'],grid_table.at[grid.best_index_,'std_test_score']))

print("The best classifier is: {}".format(grid.best_estimator_))

import matplotlib.pyplot as plt

graphic = grid.cv_results_['mean_test_score']
graphic

plt.figure(figsize=(10,5))
plt.plot(k_list,graphic,color='navy',linestyle='dashed',marker='o')
plt.xlabel('K Number of Neighbors', fontdict={'fontsize': 15})
plt.ylabel('Accuracy', fontdict={'fontsize': 15})
plt.title('K NUMBER X ACCURACY', fontdict={'fontsize': 30})
plt.xticks(range(0,31,3),)